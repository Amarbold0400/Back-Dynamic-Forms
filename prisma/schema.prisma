generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Surveyor {
  id Int @id @default(autoincrement())
  email String
  name String

  forms Form[]
}

model Form {
  id Int @id @default(autoincrement())

  surveyor Surveyor @relation(fields: [createdBy], references: [id], onDelete: Cascade)
  createdBy Int 

  title String

  questions Question[]
  results Result[]
}

model Question {
  id Int @id @default(autoincrement())

  form Form @relation(fields: [formId], references: [id], onDelete: Cascade)
  formId Int

  questionType QuestionType @relation(fields: [questionTypeId], references: [id], onDelete: Cascade)
  questionTypeId Int

  questionOption QuestionOption @relation(fields: [questionOptionId], references: [id], onDelete: Cascade)
  questionOptionId Int

  order Int
  text String

  answer Answer[]
}

model QuestionType {
  id Int @id @default(autoincrement())

  type String

  questions Question[]
}

model QuestionOption {
  id Int @id @default(autoincrement())

  text String

  question Question[]
}

model Surveyee {
  id Int @id @default(autoincrement())
  name String
  email String
  results Result[]
}

model Result {
  id Int @id @default(autoincrement())

  form Form @relation(fields: [formId], references: [id], onDelete: Cascade)
  formId Int

  surveyee Surveyee @relation(fields: [surveyeeId], references: [id], onDelete: Cascade)
  surveyeeId Int

  answers Answer[]
}

model Answer {
  id Int @id @default(autoincrement())

  question Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  questionId Int

  result Result @relation(fields: [resultId], references: [id], onDelete: Cascade)
  resultId Int

  answer String
}
