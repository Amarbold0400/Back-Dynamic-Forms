generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Surveyor {
  id    Int    @id @default(autoincrement())
  email String
  name  String

  forms Form[]
}

model Form {
  id Int @id @default(autoincrement())

  surveyor   Surveyor @relation(fields: [surveyorId], references: [id], onDelete: Cascade)
  surveyorId Int

  title String

  css Style?

  questions Question[]
  results   Result[]
}

model Style {
  id Int @id @default(autoincrement())

  form   Form @relation(fields: [formId], references: [id], onDelete: Cascade)
  formId Int  @unique

  themeButtonBackground              String
  themeButtonBorderColor             String
  themeButtonColor                   String
  themeFormGroupBackgroundColor      String
  themeFormGroupBackgroundHoverColor String
  themeFormGroupBorderColor          String
  themeFormGroupBorderHoverColor     String
  themeFormGroupBorderStyle          String
  themeFormGroupBorderWidth          String
  themeGlobalBackgroundColor         String
  themeGlobalFontColor               String
  themeGlobalFontFamily              String
  themeGlobalFontSize                String
  themeGlobalLinkColor               String
  themeHelpTextColor                 String
  themeHelpTextFontSize              String
  themeHelpTextMarginTop             String
  themeInputBorderColor              String
  themeInputBorderRadius             String
  themeInputFocusBorderColor         String
  themeInputHoverBorderColor         String
  themeInputShadowColor              String
  themeLabelFontSize                 String
  themeLabelFontWeight               String
  themeLabelMarginBottom             String
  themePrimaryColor                  String
}

model Question {
  id Int @id @default(autoincrement())

  form   Form @relation(fields: [formId], references: [id], onDelete: Cascade)
  formId Int

  type                 String  @default("TextInput")
  order                Int
  text                 String  @default("Enter your field label")
  isRequired           Boolean @default(false)
  isPlaceholderVisible Boolean @default(false)
  placeholder          String  @default("Input placeholder here...")

  options QuestionOption[]
  answer  Answer[]
}

model QuestionOption {
  id Int @id @default(autoincrement())

  question   Question @relation(fields: [questionId], references: [id])
  questionId Int

  text String
}

model Surveyee {
  id      Int      @id @default(autoincrement())
  name    String
  email   String
  results Result[]
}

model Result {
  id Int @id @default(autoincrement())

  form   Form @relation(fields: [formId], references: [id], onDelete: Cascade)
  formId Int

  surveyee   Surveyee @relation(fields: [surveyeeId], references: [id], onDelete: Cascade)
  surveyeeId Int

  answers Answer[]
}

model Answer {
  id Int @id @default(autoincrement())

  Question   Question? @relation(fields: [questionId], references: [id])
  questionId Int?

  result   Result @relation(fields: [resultId], references: [id], onDelete: Cascade)
  resultId Int

  answer String
}
